"""add tables for cheques

Revision ID: 3aeadce73d3d
Revises: 71ebdf16831f
Create Date: 2024-11-04 16:52:27.011965

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import text
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import ENUM

# revision identifiers, used by Alembic.
revision: str = '3aeadce73d3d'
down_revision: Union[str, None] = '71ebdf16831f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cheques',
                    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
                    sa.Column('name', sa.Text(), nullable=True),
                    sa.Column('type', ENUM('PERSONAL', 'MULTY', name='chequetype', create_type=True), nullable=False),
                    sa.Column('amount', sa.Numeric(precision=20, scale=8), nullable=False),
                    sa.Column('currency_type', ENUM('GMEME', 'BMEME', name='currencytype', create_type=False), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('password', sa.Text(), nullable=True),
                    sa.Column('connected_to_user', sa.BigInteger(), nullable=True),
                    sa.Column('activation_limit', sa.BigInteger(), server_default=sa.text('1'), nullable=False),
                    sa.Column('require_subscriptions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("jsonb('[]')"), nullable=False),
                    sa.Column('created_by_id', sa.BigInteger(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('deleted_by_id', sa.BigInteger(), nullable=True),
                    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('allocation_transaction_id', sa.UUID(), nullable=False),
                    sa.Column('payback_transaction_id', sa.UUID(), nullable=True),
                    sa.Column('trace_uuid', sa.UUID(), nullable=False),
                    sa.CheckConstraint('connected_to_user != created_by_id', name='check_connected_user_not_created_by'),
                    sa.ForeignKeyConstraint(['allocation_transaction_id'], ['transactions.id'], ),
                    sa.ForeignKeyConstraint(['payback_transaction_id'], ['transactions.id'], ),
                    sa.ForeignKeyConstraint(['created_by_id'], ['users.telegram_id'], ),
                    sa.ForeignKeyConstraint(['deleted_by_id'], ['users.telegram_id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('cheque_activations',
                    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
                    sa.Column('cheque_id', sa.BigInteger(), nullable=False),
                    sa.Column('user_id', sa.BigInteger(), nullable=False),
                    sa.Column('status', ENUM('IN_PROGRESS', 'COMPLETED', 'FAILED', name='chequeactivationstatus', create_type=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('failed_message', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("jsonb('{}')"), nullable=False),
                    sa.Column('payout_transaction_id', sa.UUID(), nullable=True),
                    sa.Column('trace_uuid', sa.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['cheque_id'], ['cheques.id'], ),
                    sa.ForeignKeyConstraint(['payout_transaction_id'], ['transactions.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['users.telegram_id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('unique_completed_activation_per_user_cheque', 'cheque_activations', ['user_id', 'cheque_id'], unique=True, postgresql_where=sa.text("status = 'COMPLETED'"))
    # ### end Alembic commands ###
    op.execute(text("""ALTER TYPE settingskey ADD VALUE 'MIN_GMEME_PER_USER_CHEQUE_AMOUNT'"""))
    op.execute(text("""INSERT INTO "public"."settings" ("id", "int_val", "str_val") VALUES ('MIN_GMEME_CHEQUE_AMOUNT', '10', NULL);"""))
    op.execute(text("""INSERT INTO "public"."settings" ("id", "int_val", "str_val") VALUES ('MIN_GMEME_PER_USER_CHEQUE_AMOUNT', '10', NULL);"""))


def downgrade() -> None:
    pass
